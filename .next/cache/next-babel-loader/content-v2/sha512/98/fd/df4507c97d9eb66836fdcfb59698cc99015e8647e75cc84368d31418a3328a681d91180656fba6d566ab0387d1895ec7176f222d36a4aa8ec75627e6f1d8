{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Coding\\\\React\\\\NEXT\\\\bigger-news-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\"; //this is an object which allows us to connect\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  // i props li prende da sotto, in questa stesssa pagina, è cio che ritorna getStaticProps(context)\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 3\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://Luca:Nextjs83@cluster0.ryhfa.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: true,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; //meetupId is the identifier I have between [] as page name which refers a dynamic name/id\n\n  const client = await MongoClient.connect(\"mongodb+srv://Luca:Nextjs83@cluster0.ryhfa.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // get access to the collection\n  // now I want to get access to a single meetup\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId) //will convert the string meetupId into such a BSON objectId object (POI DOBBIAMO convertire IN STRINGhe le proprietà dell'oggetto selectedMeetup)\n\n  }); //se l'id pescato dal mongodb servere = all'id letto sulla barra indirizzi..\n  // const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n  return {\n    // per precaricare sul server, assieme alla struttura HTML del sito, nella pagina da scaricare subito e da mostrare per motori ricerca (SEO) dei dati attraverso i props\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString()\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Coding/React/NEXT/bigger-news-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC,C,CAAiD;;AAEjD,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC7B;AACA,sBACC,QAAC,YAAD;AACC,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADzB;AAEC,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFzB;AAGC,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH3B;AAIC,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ/B;AAAA;AAAA;AAAA;AAAA,UADD;AAQA;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACtC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACpB,4FADoB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACNC,IAAAA,QAAQ,EAAE,IADJ;AAENC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC/BC,MAAAA,MAAM,EAAE;AACPC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADH;AADuB,KAAb,CAAZ;AAFD,GAAP;AAQA;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAD6C,CACH;;AAE1C,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACpB,4FADoB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAR6C,CAQO;AACpD;;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACtDb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD,CADyC,CAC7B;;AAD6B,GAA1B,CAA7B,CAV6C,CAYzC;AAEJ;;AACAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACN;AACAhB,IAAAA,KAAK,EAAE;AACNC,MAAAA,UAAU,EAAE;AACX2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB;AADO;AADN;AAFD,GAAP;AAQA;AAED,eAAexB,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\"; //this is an object which allows us to connect\r\n\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetails(props) {\r\n\t// i props li prende da sotto, in questa stesssa pagina, è cio che ritorna getStaticProps(context)\r\n\treturn (\r\n\t\t<MeetupDetail\r\n\t\t\timage={props.meetupData.image}\r\n\t\t\ttitle={props.meetupData.title}\r\n\t\t\taddress={props.meetupData.address}\r\n\t\t\tdescription={props.meetupData.description}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\tconst client = await MongoClient.connect(\r\n\t\t\"mongodb+srv://Luca:Nextjs83@cluster0.ryhfa.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n\t);\r\n\r\n\tconst db = client.db();\r\n\tconst meetupsCollection = db.collection(\"meetups\");\r\n\r\n\tconst meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\tclient.close();\r\n\r\n\treturn {\r\n\t\tfallback: true,\r\n\t\tpaths: meetups.map((meetup) => ({\r\n\t\t\tparams: {\r\n\t\t\t\tmeetupId: meetup._id.toString(),\r\n\t\t\t},\r\n\t\t})),\r\n\t};\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n\tconst meetupId = context.params.meetupId; //meetupId is the identifier I have between [] as page name which refers a dynamic name/id\r\n\r\n\tconst client = await MongoClient.connect(\r\n\t\t\"mongodb+srv://Luca:Nextjs83@cluster0.ryhfa.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n\t);\r\n\r\n\tconst db = client.db();\r\n\tconst meetupsCollection = db.collection(\"meetups\"); // get access to the collection\r\n\t// now I want to get access to a single meetup\r\n\tconst selectedMeetup = await meetupsCollection.findOne({\r\n\t\t_id: ObjectId(meetupId), //will convert the string meetupId into such a BSON objectId object (POI DOBBIAMO convertire IN STRINGhe le proprietà dell'oggetto selectedMeetup)\r\n\t}); //se l'id pescato dal mongodb servere = all'id letto sulla barra indirizzi..\r\n\r\n\t// const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\tclient.close();\r\n\r\n\treturn {\r\n\t\t// per precaricare sul server, assieme alla struttura HTML del sito, nella pagina da scaricare subito e da mostrare per motori ricerca (SEO) dei dati attraverso i props\r\n\t\tprops: {\r\n\t\t\tmeetupData: {\r\n\t\t\t\tid: selectedMeetup._id.toString(),\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}